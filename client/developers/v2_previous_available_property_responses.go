// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"gitlab.com/kskewes/palace-advertising-go/models"
)

// V2PreviousAvailablePropertyReader is a Reader for the V2PreviousAvailableProperty structure.
type V2PreviousAvailablePropertyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *V2PreviousAvailablePropertyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewV2PreviousAvailablePropertyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewV2PreviousAvailablePropertyOK creates a V2PreviousAvailablePropertyOK with default headers values
func NewV2PreviousAvailablePropertyOK() *V2PreviousAvailablePropertyOK {
	return &V2PreviousAvailablePropertyOK{}
}

/*V2PreviousAvailablePropertyOK handles this case with default header values.

Withdrawn or leased details of a previous 'Available Property'
*/
type V2PreviousAvailablePropertyOK struct {
	Payload *models.V2AvailablePropertyPrevious
}

func (o *V2PreviousAvailablePropertyOK) Error() string {
	return fmt.Sprintf("[GET /v2PreviousAvailableProperty/JSON/{PropertyCode}][%d] v2PreviousAvailablePropertyOK  %+v", 200, o.Payload)
}

func (o *V2PreviousAvailablePropertyOK) GetPayload() *models.V2AvailablePropertyPrevious {
	return o.Payload
}

func (o *V2PreviousAvailablePropertyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V2AvailablePropertyPrevious)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
