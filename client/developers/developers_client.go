// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new developers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for developers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	V2AvailableProperties(params *V2AvailablePropertiesParams) (*V2AvailablePropertiesOK, error)

	V2AvailablePropertyImages(params *V2AvailablePropertyImagesParams) (*V2AvailablePropertyImagesOK, error)

	V2AvailablePropertyImagesURL(params *V2AvailablePropertyImagesURLParams) (*V2AvailablePropertyImagesURLOK, error)

	V2PreviousAvailableProperty(params *V2PreviousAvailablePropertyParams) (*V2PreviousAvailablePropertyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V2AvailableProperties alls current available properties with detailed data

  This shows all 'Available Properties' with detailed data

*/
func (a *Client) V2AvailableProperties(params *V2AvailablePropertiesParams) (*V2AvailablePropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AvailablePropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v2AvailableProperties",
		Method:             "GET",
		PathPattern:        "/v2AvailableProperties/JSON",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AvailablePropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2AvailablePropertiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2AvailableProperties: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  V2AvailablePropertyImages arrays of images and meta data

  Images (Base64 encoded) and meta data related to 'Available Property'

*/
func (a *Client) V2AvailablePropertyImages(params *V2AvailablePropertyImagesParams) (*V2AvailablePropertyImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AvailablePropertyImagesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v2AvailablePropertyImages",
		Method:             "GET",
		PathPattern:        "/v2AvailablePropertyImages/JSON/{PropertyCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AvailablePropertyImagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2AvailablePropertyImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2AvailablePropertyImages: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  V2AvailablePropertyImagesURL arrays of image URL s and meta data

  Images (URL Links) and meta data related to 'Available Property'

*/
func (a *Client) V2AvailablePropertyImagesURL(params *V2AvailablePropertyImagesURLParams) (*V2AvailablePropertyImagesURLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2AvailablePropertyImagesURLParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v2AvailablePropertyImagesURL",
		Method:             "GET",
		PathPattern:        "/v2AvailablePropertyImagesURL/JSON/{PropertyCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2AvailablePropertyImagesURLReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2AvailablePropertyImagesURLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2AvailablePropertyImagesURL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  V2PreviousAvailableProperty withdrawns or leased details

  This shows withdrawn or leased details of a previous 'Available Property'

*/
func (a *Client) V2PreviousAvailableProperty(params *V2PreviousAvailablePropertyParams) (*V2PreviousAvailablePropertyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV2PreviousAvailablePropertyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "v2PreviousAvailableProperty",
		Method:             "GET",
		PathPattern:        "/v2PreviousAvailableProperty/JSON/{PropertyCode}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V2PreviousAvailablePropertyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V2PreviousAvailablePropertyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v2PreviousAvailableProperty: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
