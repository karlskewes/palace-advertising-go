// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewV2AvailablePropertyImagesURLParams creates a new V2AvailablePropertyImagesURLParams object
// with the default values initialized.
func NewV2AvailablePropertyImagesURLParams() *V2AvailablePropertyImagesURLParams {
	var ()
	return &V2AvailablePropertyImagesURLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewV2AvailablePropertyImagesURLParamsWithTimeout creates a new V2AvailablePropertyImagesURLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewV2AvailablePropertyImagesURLParamsWithTimeout(timeout time.Duration) *V2AvailablePropertyImagesURLParams {
	var ()
	return &V2AvailablePropertyImagesURLParams{

		timeout: timeout,
	}
}

// NewV2AvailablePropertyImagesURLParamsWithContext creates a new V2AvailablePropertyImagesURLParams object
// with the default values initialized, and the ability to set a context for a request
func NewV2AvailablePropertyImagesURLParamsWithContext(ctx context.Context) *V2AvailablePropertyImagesURLParams {
	var ()
	return &V2AvailablePropertyImagesURLParams{

		Context: ctx,
	}
}

// NewV2AvailablePropertyImagesURLParamsWithHTTPClient creates a new V2AvailablePropertyImagesURLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewV2AvailablePropertyImagesURLParamsWithHTTPClient(client *http.Client) *V2AvailablePropertyImagesURLParams {
	var ()
	return &V2AvailablePropertyImagesURLParams{
		HTTPClient: client,
	}
}

/*V2AvailablePropertyImagesURLParams contains all the parameters to send to the API endpoint
for the v2 available property images URL operation typically these are written to a http.Request
*/
type V2AvailablePropertyImagesURLParams struct {

	/*PropertyCode
	  Internal 'Property Code'

	*/
	PropertyCode string
	/*Encrypt
	  'encrypt' indicates if the URL image links to be returned are links with 'http' or encrypted 'https'.  The options are 'yes' or 'no'.<BR><BR> NOTE: The following is an example of a request using the the 'encrypt' parameter...<BR><BR>https://api.getpalace.com/Service.svc/RestService/v2AvailablePropertyImagesURL/JSON/RBPR000005?encrypt=yes

	*/
	Encrypt *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) WithTimeout(timeout time.Duration) *V2AvailablePropertyImagesURLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) WithContext(ctx context.Context) *V2AvailablePropertyImagesURLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) WithHTTPClient(client *http.Client) *V2AvailablePropertyImagesURLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPropertyCode adds the propertyCode to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) WithPropertyCode(propertyCode string) *V2AvailablePropertyImagesURLParams {
	o.SetPropertyCode(propertyCode)
	return o
}

// SetPropertyCode adds the propertyCode to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) SetPropertyCode(propertyCode string) {
	o.PropertyCode = propertyCode
}

// WithEncrypt adds the encrypt to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) WithEncrypt(encrypt *string) *V2AvailablePropertyImagesURLParams {
	o.SetEncrypt(encrypt)
	return o
}

// SetEncrypt adds the encrypt to the v2 available property images URL params
func (o *V2AvailablePropertyImagesURLParams) SetEncrypt(encrypt *string) {
	o.Encrypt = encrypt
}

// WriteToRequest writes these params to a swagger request
func (o *V2AvailablePropertyImagesURLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param PropertyCode
	if err := r.SetPathParam("PropertyCode", o.PropertyCode); err != nil {
		return err
	}

	if o.Encrypt != nil {

		// query param encrypt
		var qrEncrypt string
		if o.Encrypt != nil {
			qrEncrypt = *o.Encrypt
		}
		qEncrypt := qrEncrypt
		if qEncrypt != "" {
			if err := r.SetQueryParam("encrypt", qEncrypt); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
